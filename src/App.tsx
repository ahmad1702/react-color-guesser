import React, { useRef, useState } from "react";
import { Helmet } from "react-helmet";
import { randomeHexColorArr, rgbToHex } from "./utils/utils";

const App: React.FC = () => {
  const ref =
    useRef<HTMLDivElement>() as React.MutableRefObject<HTMLInputElement>;
  type NotifMsg = {
    status: "correct" | "incorrect";
    msg: string;
  };
  const [notifMsg, setNotifMsg] = useState<NotifMsg | null>();

  const [choices, setChoices] = useState(randomeHexColorArr());
  const handleChoiceClick = (choiceMade: string) => {
    const correctColorAsRgb = ref.current?.style.backgroundColor;
    if (!correctColorAsRgb) return;
    const correctColor = rgbToHex(correctColorAsRgb).toUpperCase();
    if (choiceMade === correctColor) {
      setNotifMsg({
        status: "correct",
        msg: `Congrats, you got it Right!`,
      });
    } else {
      setNotifMsg({
        status: "incorrect",
        msg: `${choiceMade} is incorrect! The correct answer was ${correctColor}`,
      });
    }
  };
  // useEffect(() => {
  //   if (ref.current) {
  //     ref.current.style.backgroundColor =
  //       choices[Math.floor(Math.random() * 3) + 1];
  //   }
  // }, []);

  const handleNext = async () => {
    setNotifMsg(null);

    const newChoices: string[] = randomeHexColorArr();
    if (ref.current) {
      // ref.current.style.backgroundColor =
      const randomColor: string = newChoices[Math.floor(Math.random() * 3) + 1];
      ref.current.classList.add(`bg-[${randomColor}]`);
    }
    await setChoices(newChoices);
  };

  const notifStatusStyle = (status: "correct" | "incorrect") => {
    if (status === "correct") {
      return "bg-teal-500 text-white";
    } else {
      return "bg-red-200 text-red-900";
    }
  };

  return (
    <>
      <Helmet>
        <title>HEX Color Guessing Game</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Helmet>

      <div className="relative h-screen w-full flex items-center justify-center bg-slate-200">
        <div className="absolute top-5 left-0 w-full h-24 px-10  flex items-center justify-center">
          <div
            className={`w-auto h-full rounded-2xl flex items-center text-lg font-semibold px-10 duration-300 ${
              notifMsg ? "opacity-100" : "opacity-0"
            }
            ${notifMsg && notifStatusStyle(notifMsg.status)}`}
          >
            {notifMsg ? notifMsg.msg : ""}
          </div>
        </div>
        <div className="h-[60vh] w-[70vw] p-10 flex flex-col justify-center items-center rounded-[2rem] bg-white shadow-[2rem]">
          <div className="w-full h-14 font-extrabold text-2xl">
            Hex Guessing game
          </div>
          <div ref={ref} className={`w-1/2 h-1/3 mb-5 rounded-2xl`} />
          <div className="w-full h-32 flex gap-3">
            {choices.map((choice) => (
              <div
                key={choice}
                onClick={() => handleChoiceClick(choice)}
                className="h-full w-1/3 rounded-2xl hover:-translate-y-0.5 hover:shadow-xl border-2 border-neutral-200 cursor-pointer duration-300 flex items-center justify-center text-2xl font-semibold"
              >
                {choice}
              </div>
            ))}
          </div>
          <div
            onClick={handleNext}
            className="bg-slate-300 select-none text-slate-900 hover:bg-slate-500 hover:text-slate-50 duration-300 cursor-pointer py-2 px-5 mt-5 rounded-xl font-bold"
          >
            Next Question
          </div>
        </div>
      </div>
    </>
  );
};

export default App;
